/*
 * C125DataProcessor.cpp
 *
 *  Created on: Sep 23, 2017
 *      Author: hungnv103
 */

#include "C125DataProcessor.h"
#include "cmmenums.h"
#include <unistd.h>
#include "SystemComponentDetector.h"
#include <iostream>
#include <string.h>

C125DataProcessor::C125DataProcessor() {
	// TODO Auto-generated constructor stub

}

C125DataProcessor::~C125DataProcessor() {
	// TODO Auto-generated destructor stub
}

void C125DataProcessor::run()
{
	mDhlComunicator.run();
	SystemComponentDetector::run();
	C125Message receivedMessage;
	while(1 ){
		if(mDhlComunicator.getReceivedMessage(receivedMessage) == ERR_SUCCESS){
			switch( receivedMessage.msgOpcode ){
			case REQUEST_ASSIGNED_TARGET:
			{
				int returnCode = mC125Communicator.assignTarget(receivedMessage.msgTrackInfo.bear,receivedMessage.msgTrackInfo.range);
				std::cout<<"Received Assigned target bear: "<<receivedMessage.msgTrackInfo.bear<<"  rage: "<<receivedMessage.msgTrackInfo.range<<std::endl;
				if(returnCode == ERR_SUCCESS ){
					receivedMessage.msgOpcode = RESPOND_ASSIGNED_DONE;
				} else {
					receivedMessage.msgOpcode = RESPOND_ASSIGNED_FAILE;
					mC125Communicator.setLabelDefault();
				}
				receivedMessage.msgC125Status.status = returnCode;
				std::cout<<"Received REQUEST_ASSIGNED_TARGET from dhl. Respond "<<receivedMessage.msgOpcode<<"  status: "<<std::hex<<receivedMessage.msgC125Status.status<<std::endl;
				mDhlComunicator.transmitMessage(receivedMessage);
				break;
			}
			case REQUEST_DEASSIGNED_TARGET:
			{
				int returnCode = mC125Communicator.deassignTarget();
				if(ERR_SUCCESS == returnCode ){
					receivedMessage.msgOpcode = RESPOND_DEASSIGNED_DONE;
					mC125Communicator.setLabelDefault();
				} else {
					receivedMessage.msgOpcode = RESPOND_DEASSIGNED_FAILED;
				}
				receivedMessage.msgC125Status.status = returnCode;
				mDhlComunicator.transmitMessage(receivedMessage);
				std::cout<<"Received REQUEST_DEASSIGNED_TARGET from dhl. Respond "<<receivedMessage.msgOpcode<<"  status: "<<std::hex<<receivedMessage.msgC125Status.status<<std::endl;
				break;
			}
			case REQUEST_SYSTEM_STATUS:
			{
				int returnCode = mC125Communicator.readSystemStatus();
				receivedMessage.msgOpcode = RESPOND_REQUEST_STATUS;
				receivedMessage.msgC125Status.status = returnCode;
				std::cout<<"Received REQUEST_SYSTEM_STATUS from dhl. Respond "<<receivedMessage.msgOpcode<<"  status: "<<std::hex<<receivedMessage.msgC125Status.status<<std::endl;
				mDhlComunicator.transmitMessage(receivedMessage);
				break;
			}
			case REQUEST_TRACK_UPDATE:
			{
				int returnCode = mC125Communicator.requestUpdateTrack(receivedMessage.msgTrackInfo.bear,receivedMessage.msgTrackInfo.range);
				 mC125Communicator.setATAInfo(receivedMessage.msgTrackInfo.bear, receivedMessage.msgTrackInfo.range, receivedMessage.msgTrackInfo.high, receivedMessage.msgTrackInfo.velocity);
				std::cout<<"Received Request re-update target bear: "<<receivedMessage.msgTrackInfo.bear<<"  rage: "<<receivedMessage.msgTrackInfo.range<<std::endl;
				break;
			}
			default:
				///Do request system status
				std::cout<<"Received message with invalid opcode from dhl:  "<<receivedMessage.msgOpcode<<std::endl;
				break;
			}
		} else {
			//			int returnCode = mC125Communicator.readSystemStatus();
			//			std::cout<<"Received REQUEST_SYSTEM_STATUS from dhl. Respond "<<REQUEST_SYSTEM_STATUS<<"  status: "<<returnCode<<std::endl;
			usleep(10000);
		}
	}
}
